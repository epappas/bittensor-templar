---
# Main tasks for Grafana plugins installation

- name: Ensure Grafana plugins directory exists
  file:
    path: "{{ grafana_plugins_dir }}"
    state: directory
    owner: "{{ grafana_system_user }}"
    group: "{{ grafana_system_group }}"
    mode: 0755

- name: Create templar-version-plugin directory
  file:
    path: "{{ grafana_plugins_dir }}/templar-version-datasource"
    state: directory
    owner: "{{ grafana_system_user }}"
    group: "{{ grafana_system_group }}"
    mode: 0755

- name: Copy templar-version-plugin files to server
  copy:
    src: "{{ playbook_dir }}/../grafana/templar-version-plugin/dist/"
    dest: "{{ grafana_plugins_dir }}/templar-version-datasource/"
    owner: "{{ grafana_system_user }}"
    group: "{{ grafana_system_group }}"
    mode: 0755
  become: true

- name: Fix ownership of plugin files
  file:
    path: "{{ grafana_plugins_dir }}/templar-version-datasource"
    state: directory
    owner: "{{ grafana_system_user }}"
    group: "{{ grafana_system_group }}"
    recurse: yes
    mode: 0755

- name: Ensure plugins section exists in grafana.ini
  lineinfile:
    path: /etc/grafana/grafana.ini
    line: "[plugins]"
    state: present
  register: plugins_section

- name: Update Grafana configuration to allow unsigned plugins
  lineinfile:
    path: /etc/grafana/grafana.ini
    regexp: "^;?allow_loading_unsigned_plugins *=.*"
    line: "allow_loading_unsigned_plugins = {{ grafana_plugins_to_allow | join(',') }}"
    insertafter: "^\\[plugins\\]"
    state: present
  register: plugins_config

- name: Restart Grafana service
  service:
    name: grafana-server
    state: restarted
  when: plugins_config is changed

- name: Wait for Grafana to be available
  uri:
    url: "http://localhost:{{ grafana_http_port }}/api/health"
    method: GET
    status_code: 200
  register: result
  until: result is success
  retries: 60
  delay: 1
  when: plugins_config is changed

- name: Create datasource for Templar Version API
  uri:
    url: "http://localhost:{{ grafana_http_port }}/api/datasources"
    method: POST
    body_format: json
    body:
      name: "Templar Version"
      type: "templar-version-datasource"
      uid: "templar-version"
      access: "proxy"
      isDefault: false
      jsonData:
        url: "{{ templar_version_api_url }}"
    headers:
      Content-Type: "application/json"
      Authorization: "Basic {{ (grafana_security_admin_user + ':' + grafana_security_admin_password) | b64encode }}"
    status_code: [200, 201, 409]  # 409 means datasource with same name already exists
  register: datasource_result
  failed_when: datasource_result.status not in [200, 201, 409]

- name: Display datasource configuration result
  debug:
    msg: "Templar Version datasource {{ 'already exists' if datasource_result.status == 409 else 'created successfully' }}"

- name: Create datasource provisioning file for Templar Version
  template:
    src: templar-version-datasource.yml.j2
    dest: "{{ grafana_provisioning_dir }}/datasources/templar-version-datasource.yml"
    owner: "{{ grafana_system_user }}"
    group: "{{ grafana_system_group }}"
    mode: 0640
  notify: restart grafana

- name: Verify plugin is loaded correctly
  uri:
    url: "http://localhost:{{ grafana_http_port }}/api/plugins/templar-version-datasource"
    method: GET
    headers:
      Authorization: "Basic {{ (grafana_security_admin_user + ':' + grafana_security_admin_password) | b64encode }}"
    status_code: 200
  register: plugin_status
  failed_when: false

- name: Display plugin loading status
  debug:
    msg: "Templar Version plugin successfully loaded and available"
  when: plugin_status.status is defined and plugin_status.status == 200

- name: Display plugin error status
  debug:
    msg: "WARNING: Templar Version plugin may not be properly loaded. Please check Grafana logs."
  when: plugin_status.status is not defined or plugin_status.status != 200
