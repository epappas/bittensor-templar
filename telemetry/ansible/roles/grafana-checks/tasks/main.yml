---
# Tasks for comprehensive Grafana stack health checks
# This role performs a waterfall of verification steps to ensure
# the entire Grafana stack has been deployed correctly

- name: Create verification results directory
  file:
    path: "{{ verification_output_dir }}"
    state: directory
    mode: '0755'
  delegate_to: localhost
  become: false
  run_once: true
  when: save_verification_results | bool

- name: Set timestamp for verification report
  set_fact:
    verification_timestamp: "{{ lookup('pipe', 'date +%Y%m%d-%H%M%S') }}"
  delegate_to: localhost
  become: false
  run_once: true
  when: save_verification_results | bool

- name: Check Grafana service is active
  systemd:
    name: grafana-server
  register: grafana_service

- name: Verify Grafana service status
  debug:
    msg: "{{ 'Grafana service is active and running ✅' if grafana_service.status.ActiveState == 'active' else 'WARNING: Grafana service is not active ❌' }}"
  failed_when: 
    - fail_on_verification_error | bool
    - grafana_service.status.ActiveState != 'active'

- name: Check Nginx service is active
  systemd:
    name: nginx
  register: nginx_service

- name: Verify Nginx service status
  debug:
    msg: "{{ 'Nginx service is active and running ✅' if nginx_service.status.ActiveState == 'active' else 'WARNING: Nginx service is not active ❌' }}"
  failed_when: 
    - fail_on_verification_error | bool
    - nginx_service.status.ActiveState != 'active'

- name: Check if version API service is active
  systemd:
    name: templar-version-api
  register: version_api_service
  ignore_errors: true

- name: Verify version API service status
  debug:
    msg: "{{ 'Version API service is active and running ✅' if version_api_service.status.ActiveState == 'active' else 'WARNING: Version API service is not active ❌' }}"
  failed_when: 
    - fail_on_verification_error | bool
    - version_api_service.status.ActiveState != 'active'
  when: version_api_service.status is defined

- name: Verify Grafana API health
  uri:
    url: "http://localhost:{{ grafana_http_port }}/api/health"
    method: GET
    status_code: 200
    return_content: yes
  register: health_result
  failed_when: false

- name: Report Grafana API health status
  debug:
    msg: "{{ 'Grafana API is healthy ✅' if health_result.status is defined and health_result.status == 200 else 'WARNING: Grafana API health check failed ❌' }}"
  failed_when: 
    - fail_on_verification_error | bool
    - health_result.status is not defined or health_result.status != 200

- name: Verify dashboard provisioning directory structure
  stat:
    path: "/etc/grafana/dashboards/templar_metrics.json"
  register: dashboard_file

- name: Report dashboard file status
  debug:
    msg: "{{ 'Dashboard file exists ✅' if dashboard_file.stat.exists else 'WARNING: Dashboard file not found ❌' }}"
  failed_when: 
    - fail_on_verification_error | bool
    - not dashboard_file.stat.exists

- name: Verify plugins directory structure
  stat:
    path: "/var/lib/grafana/plugins/templar-version-datasource"
  register: plugin_dir

- name: Report plugin directory status
  debug:
    msg: "{{ 'Plugin directory exists ✅' if plugin_dir.stat.exists else 'WARNING: Plugin directory not found ❌' }}"
  failed_when: 
    - fail_on_verification_error | bool
    - not plugin_dir.stat.exists

- name: Check plugin files
  command: "ls -la /var/lib/grafana/plugins/templar-version-datasource"
  register: plugin_files
  changed_when: false
  failed_when: false

- name: Verify plugin content
  debug:
    msg: "Plugin directory has content ✅"
  failed_when: 
    - fail_on_verification_error | bool
    - plugin_files.rc != 0 or plugin_files.stdout == ""
  when: plugin_dir.stat.exists

- name: Verify dashboard provider configuration
  command: "cat /etc/grafana/provisioning/dashboards/default.yml"
  register: dashboard_provider_config
  changed_when: false
  failed_when: false

- name: Check dashboard provider content
  debug:
    msg: "{{ 'Dashboard provider configuration is valid ✅' if dashboard_provider_config.rc == 0 and 'path: /etc/grafana/dashboards' in dashboard_provider_config.stdout else 'WARNING: Dashboard provider configuration issue ❌' }}"
  failed_when: 
    - fail_on_verification_error | bool
    - (dashboard_provider_config.rc != 0 or (dashboard_provider_config.stdout is defined and 'path: /etc/grafana/dashboards' not in dashboard_provider_config.stdout))

- name: Verify plugins configuration in grafana.ini
  shell: "grep -A3 '\\[plugins\\]' /etc/grafana/grafana.ini || echo 'plugins section not found'"
  register: plugins_config
  changed_when: false
  failed_when: false

- name: Check plugins configuration content
  debug:
    msg: "{{ 'Plugins configuration is valid ✅' if 'allow_loading_unsigned_plugins' in plugins_config.stdout and 'templar-version-datasource' in plugins_config.stdout else 'WARNING: Plugins configuration issue ❌' }}"
  failed_when: 
    - fail_on_verification_error | bool
    - (plugins_config.stdout is defined and ('allow_loading_unsigned_plugins' not in plugins_config.stdout or 'templar-version-datasource' not in plugins_config.stdout))

- name: Verify anonymous access configuration in grafana.ini
  shell: "grep -A5 '\\[auth.anonymous\\]' /etc/grafana/grafana.ini || echo 'anonymous access section not found'"
  register: anonymous_config
  changed_when: false
  failed_when: false

- name: Check anonymous access configuration content
  debug:
    msg: "{{ 'Anonymous access configuration is valid ✅' if 'enabled = true' in anonymous_config.stdout else 'WARNING: Anonymous access configuration issue ❌' }}"
  failed_when: 
    - fail_on_verification_error | bool
    - (anonymous_config.stdout is defined and 'enabled = true' not in anonymous_config.stdout)

- name: Verify Grafana datasources via API
  uri:
    url: "http://localhost:{{ grafana_http_port }}/api/datasources"
    method: GET
    user: "{{ grafana_security_admin_user }}"
    password: "{{ grafana_security_admin_password }}"
    force_basic_auth: yes
    return_content: yes
    status_code: 200
  register: datasources
  failed_when: false

- name: Check InfluxDB datasource
  debug:
    msg: "{{ 'InfluxDB datasource is configured ✅' if datasources.status == 200 and datasources.json | selectattr('type', 'equalto', 'influxdb') | list | length > 0 else 'WARNING: InfluxDB datasource not found ❌' }}"
  failed_when: 
    - fail_on_verification_error | bool
    - (datasources is defined and datasources.status is defined and (datasources.status != 200 or (datasources.json is defined and (datasources.json | selectattr('type', 'equalto', 'influxdb') | list | length == 0))))
  when: datasources.status is defined and datasources.json is defined

- name: Check Templar Version datasource
  debug:
    msg: "{{ 'Templar Version datasource is configured ✅' if datasources.status == 200 and datasources.json | selectattr('type', 'equalto', 'templar-version-datasource') | list | length > 0 else 'WARNING: Templar Version datasource not found ❌' }}"
  failed_when: 
    - fail_on_verification_error | bool
    - (datasources is defined and datasources.status is defined and (datasources.status != 200 or (datasources.json is defined and (datasources.json | selectattr('type', 'equalto', 'templar-version-datasource') | list | length == 0))))
  when: datasources.status is defined and datasources.json is defined

- name: Verify dashboard access via Grafana API
  uri:
    url: "http://localhost:{{ grafana_http_port }}/api/search?type=dash-db"
    method: GET
    user: "{{ grafana_security_admin_user }}"
    password: "{{ grafana_security_admin_password }}"
    force_basic_auth: yes
    return_content: yes
    status_code: 200
  register: dashboards
  failed_when: false

- name: Check dashboard existence
  debug:
    msg: "{{ 'Templar dashboard is available ✅' if dashboards.status == 200 and dashboards.json | selectattr('title', 'equalto', 'Templar Metrics') | list | length > 0 else 'WARNING: Templar dashboard not found ❌' }}"
  failed_when: 
    - fail_on_verification_error | bool
    - (dashboards is defined and dashboards.status is defined and (dashboards.status != 200 or (dashboards.json is defined and (dashboards.json | selectattr('title', 'equalto', 'Templar Metrics') | list | length == 0))))
  when: dashboards.status is defined and dashboards.json is defined

- name: Verify NGINX proxy to Grafana
  uri:
    url: "http://localhost:80/api/health"
    method: GET
    status_code: 200
    return_content: yes
  register: nginx_proxy
  failed_when: false

- name: Check NGINX proxy status
  debug:
    msg: "{{ 'NGINX proxy to Grafana is working ✅' if nginx_proxy.status == 200 else 'WARNING: NGINX proxy to Grafana is not working ❌' }}"
  failed_when: 
    - fail_on_verification_error | bool
    - nginx_proxy.status != 200

- name: Check anonymous access to dashboard via NGINX
  uri:
    url: "http://localhost:80/d/{{ dashboards.json[0].uid | default('templar_metrics') }}/templar-metrics"
    method: GET
    status_code: [200, 302]
    return_content: yes
    follow_redirects: all
  register: dashboard_anonymous_access
  failed_when: false
  when: dashboards.status is defined and dashboards.json is defined and dashboards.json | length > 0

- name: Set dashboard access status message
  set_fact:
    dashboard_access_status: "{{ 'Anonymous dashboard access is working ✅' if dashboard_anonymous_access.status in [200, 302] and not '<a href=\"/login\">' in dashboard_anonymous_access.content else 'WARNING: Anonymous dashboard access is not working ❌' }}"
  when: dashboard_anonymous_access is defined and dashboard_anonymous_access.status is defined

- name: Check anonymous access to default dashboard
  uri:
    url: "http://localhost:80/"
    method: GET
    status_code: [200, 302]
    return_content: yes
    follow_redirects: all
  register: default_anonymous_access
  failed_when: false

- name: Set default dashboard access status message
  set_fact:
    default_access_status: "{{ 'Anonymous access to default dashboard is working ✅' if default_anonymous_access.status in [200, 302] and not '<a href=\"/login\">' in default_anonymous_access.content else 'WARNING: Anonymous access to default dashboard is not working ❌' }}"
  when: default_anonymous_access is defined and default_anonymous_access.status is defined

- name: Report dashboard access status
  debug:
    msg: "{{ dashboard_access_status | default('Could not verify dashboard access') }}"
  failed_when: 
    - fail_on_verification_error | bool
    - dashboard_access_status is defined and 'WARNING' in dashboard_access_status
  when: dashboard_access_status is defined

- name: Report default dashboard access status
  debug:
    msg: "{{ default_access_status | default('Could not verify default dashboard access') }}"
  failed_when: 
    - fail_on_verification_error | bool
    - default_access_status is defined and 'WARNING' in default_access_status
  when: default_access_status is defined

- name: Check version API response
  uri:
    url: "http://localhost/api/templar/version"
    method: GET
    status_code: 200
    return_content: yes
  register: version_api_response
  failed_when: false

- name: Report version API status
  debug:
    msg: "{{ 'Version API is working ✅' if version_api_response.status == 200 and version_api_response.json is defined and version_api_response.json.version is defined else 'WARNING: Version API is not working ❌' }}"
  failed_when: 
    - fail_on_verification_error | bool
    - version_api_response.status != 200 or version_api_response.json is not defined or version_api_response.json.version is not defined

- name: Generate verification summary report
  template:
    src: verification_report.j2
    dest: "{{ verification_output_dir }}/verification_report_{{ verification_timestamp }}.txt"
  delegate_to: localhost
  become: false
  run_once: true
  vars:
    verification_results:
      - name: "Grafana Service"
        status: "{{ grafana_service.status.ActiveState == 'active' }}"
      - name: "Nginx Service"
        status: "{{ nginx_service.status.ActiveState == 'active' }}"
      - name: "Version API Service"
        status: "{{ version_api_service.status.ActiveState == 'active' if version_api_service.status is defined else false }}"
      - name: "Grafana API Health"
        status: "{{ health_result.status == 200 if health_result.status is defined else false }}"
      - name: "Dashboard File"
        status: "{{ dashboard_file.stat.exists }}"
      - name: "Plugin Directory"
        status: "{{ plugin_dir.stat.exists }}"
      - name: "Dashboard Provider Config"
        status: "{{ dashboard_provider_config.rc == 0 and 'path: /etc/grafana/dashboards' in dashboard_provider_config.stdout }}"
      - name: "Plugins Configuration"
        status: "{{ 'allow_loading_unsigned_plugins' in plugins_config.stdout and 'templar-version-datasource' in plugins_config.stdout }}"
      - name: "Anonymous Access Config"
        status: "{{ 'enabled = true' in anonymous_config.stdout }}"
      - name: "InfluxDB Datasource"
        status: "{{ datasources.status == 200 and datasources.json | selectattr('type', 'equalto', 'influxdb') | list | length > 0 if datasources.status is defined and datasources.json is defined else false }}"
      - name: "Templar Version Datasource"
        status: "{{ datasources.status == 200 and datasources.json | selectattr('type', 'equalto', 'templar-version-datasource') | list | length > 0 if datasources.status is defined and datasources.json is defined else false }}"
      - name: "Dashboard Availability"
        status: "{{ dashboards.status == 200 and dashboards.json | selectattr('title', 'equalto', 'Templar Metrics') | list | length > 0 if dashboards.status is defined and dashboards.json is defined else false }}"
      - name: "NGINX Proxy"
        status: "{{ nginx_proxy.status == 200 if nginx_proxy.status is defined else false }}"
      - name: "Anonymous Dashboard Access"
        status: "{{ dashboard_anonymous_access.status in [200, 302] and not '<a href=\"/login\">' in dashboard_anonymous_access.content if dashboard_anonymous_access is defined and dashboard_anonymous_access.status is defined else false }}"
      - name: "Default Dashboard Access"
        status: "{{ default_anonymous_access.status in [200, 302] and not '<a href=\"/login\">' in default_anonymous_access.content if default_anonymous_access is defined and default_anonymous_access.status is defined else false }}"
      - name: "Version API"
        status: "{{ version_api_response.status == 200 and version_api_response.json is defined and version_api_response.json.version is defined if version_api_response.status is defined else false }}"
  when: save_verification_results | bool

- name: Display overall verification result
  debug:
    msg: |
      ==========================================
      GRAFANA STACK VERIFICATION RESULT: {{ 'SUCCESS ✅' if not verification_has_errors else 'FAILED ❌' }}
      ==========================================
      {{ verification_summary }}
  vars:
    verification_has_errors: >-
      {{ 
        (grafana_service.status.ActiveState != 'active') or
        (nginx_service.status.ActiveState != 'active') or
        (version_api_service.status is defined and version_api_service.status.ActiveState != 'active') or
        (health_result.status is not defined or health_result.status != 200) or
        (not dashboard_file.stat.exists) or
        (not plugin_dir.stat.exists) or
        (dashboard_provider_config.rc != 0 or 'path: /etc/grafana/dashboards' not in dashboard_provider_config.stdout) or
        ('allow_loading_unsigned_plugins' not in plugins_config.stdout or 'templar-version-datasource' not in plugins_config.stdout) or
        ('enabled = true' not in anonymous_config.stdout) or
        (datasources.status is not defined or datasources.status != 200 or datasources.json | selectattr('type', 'equalto', 'influxdb') | list | length == 0) or
        (datasources.status is not defined or datasources.status != 200 or datasources.json | selectattr('type', 'equalto', 'templar-version-datasource') | list | length == 0) or
        (dashboards.status is not defined or dashboards.status != 200 or dashboards.json | selectattr('title', 'equalto', 'Templar Metrics') | list | length == 0) or
        (nginx_proxy.status is not defined or nginx_proxy.status != 200) or
        (dashboard_anonymous_access is defined and dashboard_anonymous_access.status is defined and (dashboard_anonymous_access.status not in [200, 302] or '<a href="/login">' in dashboard_anonymous_access.content)) or
        (default_anonymous_access is defined and default_anonymous_access.status is defined and (default_anonymous_access.status not in [200, 302] or '<a href="/login">' in default_anonymous_access.content)) or
        (version_api_response.status is not defined or version_api_response.status != 200 or version_api_response.json is not defined or version_api_response.json.version is not defined)
      }}
    verification_summary: |
      {% for item in [
        {'name': 'Grafana Service', 'status': grafana_service.status.ActiveState == 'active'},
        {'name': 'Nginx Service', 'status': nginx_service.status.ActiveState == 'active'},
        {'name': 'Version API Service', 'status': version_api_service.status.ActiveState == 'active' if version_api_service.status is defined else false},
        {'name': 'Grafana API Health', 'status': health_result.status == 200 if health_result.status is defined else false},
        {'name': 'Dashboard File', 'status': dashboard_file.stat.exists},
        {'name': 'Plugin Directory', 'status': plugin_dir.stat.exists},
        {'name': 'Dashboard Provider Config', 'status': dashboard_provider_config.rc == 0 and 'path: /etc/grafana/dashboards' in dashboard_provider_config.stdout},
        {'name': 'Plugins Configuration', 'status': 'allow_loading_unsigned_plugins' in plugins_config.stdout and 'templar-version-datasource' in plugins_config.stdout},
        {'name': 'Anonymous Access Config', 'status': 'enabled = true' in anonymous_config.stdout},
        {'name': 'InfluxDB Datasource', 'status': datasources.status == 200 and datasources.json | selectattr('type', 'equalto', 'influxdb') | list | length > 0 if datasources.status is defined and datasources.json is defined else false},
        {'name': 'Templar Version Datasource', 'status': datasources.status == 200 and datasources.json | selectattr('type', 'equalto', 'templar-version-datasource') | list | length > 0 if datasources.status is defined and datasources.json is defined else false},
        {'name': 'Dashboard Availability', 'status': dashboards.status == 200 and dashboards.json | selectattr('title', 'equalto', 'Templar Metrics') | list | length > 0 if dashboards.status is defined and dashboards.json is defined else false},
        {'name': 'NGINX Proxy', 'status': nginx_proxy.status == 200 if nginx_proxy.status is defined else false},
        {'name': 'Anonymous Dashboard Access', 'status': dashboard_anonymous_access.status in [200, 302] and not '<a href="/login">' in dashboard_anonymous_access.content if dashboard_anonymous_access is defined and dashboard_anonymous_access.status is defined else false},
        {'name': 'Default Dashboard Access', 'status': default_anonymous_access.status in [200, 302] and not '<a href="/login">' in default_anonymous_access.content if default_anonymous_access is defined and default_anonymous_access.status is defined else false},
        {'name': 'Version API', 'status': version_api_response.status == 200 and version_api_response.json is defined and version_api_response.json.version is defined if version_api_response.status is defined else false}
      ] %}
        {{ "✅" if item.status else "❌" }} {{ item.name }}
      {% endfor %}